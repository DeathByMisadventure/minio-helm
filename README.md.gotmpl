# MinIO Helm Chart

{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.requirementsSection" . }}

## About MinIO

MinIO is an S3 compatible file storage system.

### Key Features

- Exabyte Scale: Supports frictionless growth in a single flat namespace, enabling seamless expansion for large-scale data storage needs.
- Warp Speed Performance: Delivers 21.8 TiB/s throughput, saturating hardware from drive IOPS to network throughput with zero bottlenecks, ideal for high-performance requirements.
- Deepest AI Ecosystem: Offers native integration with PyTorch, Iceberg, and every major AI framework, along with the richest S3 API support.
- Zero Lock-In: Provides flexibility from edge to core to cloud, ensuring compatibility across different environments without vendor lock-in.

### Benefits

- Unmatched Performance for AI: Enables fast AI training pipelines and real-time data for autonomous agents, scaling with GPU speed for AI models and applications.
Cost Efficiency: Achieves 40% lower TCO with best-in-class unit economics, reducing operational costs for enterprises.
- Wide Adoption: Trusted by 77% of the Fortune 500, 9/10 of the largest automotive companies, 10/10 of the largest US banks, and 8/10 of the largest US retailers, indicating reliability and scalability.
- Future-Proof Infrastructure: Unifies and future-proofs enterprise AI data infrastructure with a software-defined, object-native architecture, suitable for exascale era demands.
- Versatile Use Cases: Supports AI models, AI agents, and data lakehouse analytics, streaming insights instantly with compatibility for major lakehouse engines and open table formats.

## Prerequisites

- A Kubernetes cluster (version >1.19).
- Helm 3 installed.
- `kubectl` configured to interact with your cluster.
- A default StorageClass configured in the cluster for dynamic PVC provisioning.

## Configure values.yaml or valuesoverride.yaml

Customize the deployment by editing `values.yaml` or creating a `local-values.yaml` file with overrides. Key configurations include:

- `minio.image`: Specify the MinIO image repository, tag, and pull policy.
- `minio.pvc`: Configure the PVC for `/root/.MinIO` (storage size, storage class, or selector for pre-provisioned PV).
- `ingress`: Enable and configure Ingress for external access.
- `resources` and `securityContext`: Define resource limits and security settings.

## Enabling Ingress

If you lack an Ingress controller, enable `ingress.enabled` in `values.yaml` to use an external Ingress solution or configure one separately. For NGINX Ingress, set `ingress.className` to `nginx` and provide TLS settings if needed.

To use a TLS certificate, create a secret:

```bash
kubectl create --namespace MinIO secret tls MinIO-tls-cert --cert=tls.crt --key=tls.key
```

Then configure `ingress.tls` in `values.yaml`:

```yaml
ingress:
  enabled: true
  hostname: minio.lvh.me
  tls:
    - secretName: MinIO-tls-cert
      hosts:
        - minio.lvh.me
```

## Deployment

1. Verify your cluster's default StorageClass:

```bash
kubectl get storageclass
```

Ensure a default StorageClass is set, or the PVC will fail to bind.

1. Create a namespace if needed:

```bash
kubectl create ns MinIO
```

1. Customize values by creating a `local-values.yaml` file with overrides from `values.yaml`.

1. Install the Helm chart:

```bash
helm install --namespace minio -f ./local-values.yaml minio .
```

{{ template "chart.valuesSection" . }}
