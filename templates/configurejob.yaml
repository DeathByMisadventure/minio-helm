{{- $bucket := printf "%s/%s" .Values.minio.name (default "results" .Values.minio.defaultBucket | replace "s3://" "") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.minio.name }}-configure-job
  labels:
    app: {{ .Values.minio.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation #,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: {{ .Values.minio.name }}
    spec:
      restartPolicy: Never
      {{- if .Values.minio.serviceAccountName }}
      serviceAccountName: "{{ .Values.minio.serviceAccountName }}"
      {{- end }}
      containers:
        - name: {{ .Values.minio.name }}-configure-job
          image: {{ .Values.minio.image.mcimage }}
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          resources: {{- toYaml .Values.minio.resources | nindent 12 }}
          securityContext: {{- toYaml .Values.minio.securityContext | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ .Values.minio.name }}-config
            - secretRef:
                name: {{ .Values.minio.name }}-secret
          {{- if .Values.minio.tier.enabled }}
            - secretRef:
               name: {{ .Values.minio.name }}-aws-tier-env-secret
          {{- end }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              RETRY_COUNT=0
              MAX_RETRIES=20
              # Wait for mc alias set
              until mc alias set {{ .Values.minio.name }} http://{{ .Values.minio.name }}-0.{{ .Values.minio.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.minio.service.port }} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
                sleep 5
                RETRY_COUNT=$((RETRY_COUNT + 1))
              done
              if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                echo "Failed to configure MinIO after $MAX_RETRIES attempts"
                exit 1
              fi

              mc --version
              mc admin info {{ .Values.minio.name }}
              mc ready {{ .Values.minio.name }}

              # Create default credentials
              mc admin user add {{ .Values.minio.name }} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
              mc admin policy set {{ .Values.minio.name }} readwrite user=${MINIO_ACCESS_KEY}
              mc admin user info {{ .Values.minio.name }} ${MINIO_ACCESS_KEY}

              {{- if .Values.minio.defaultBucket }}
              # Create bucket
              mc mb {{ $bucket }} --ignore-existing
              # Wait for bucket readiness
              until mc stat {{ $bucket }} >/dev/null 2>&1; do
                echo "Waiting for {{ $bucket }} to become ready..."
                sleep 2
              done
              {{- end }}
              {{- if .Values.minio.tier.enabled }}
              # Add remote tier (idempotent if already exists, but may need handling for updates)
              mc tier add {{ .Values.minio.tier.type }} {{ .Values.minio.name }} {{ .Values.minio.tier.name }} --endpoint {{ .Values.minio.tier.endpoint }} --access-key ${TIER_ACCESS_KEY} --secret-key ${TIER_SECRET_KEY} --bucket {{ .Values.minio.tier.bucket }}{{ if .Values.minio.tier.prefix }} --prefix {{ .Values.minio.tier.prefix }}{{ end }}{{ if .Values.minio.tier.region }} --region {{ .Values.minio.tier.region }}{{ end }} || true
              {{- end }}
              {{- if and .Values.minio.defaultBucket .Values.minio.enableLifecycle }}
              # Remove existing rules
              mc ilm rule rm --all --force {{ $bucket }}
              # Apply lifecycle rule by importing explicit JSON
              echo {{ .Values.minio.lifecycleJson | quote }} | mc ilm import {{ $bucket }}
              mc ilm rule ls {{ $bucket }}
              mc ilm export {{ $bucket }}
              {{- end -}}
              {{- if .Values.minio.compressionEnabled }}
              mc admin config set {{ .Values.minio.name }} compression enable=on &&
              mc admin config set {{ .Values.minio.name }} compression extensions= mime_types= &&
              {{- end }}
              mc admin info {{ .Values.minio.name }}
              exit 0;
